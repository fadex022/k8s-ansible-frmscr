---
- hosts: master
  become: yes
  tasks:
    - name: Install required packages
      apt:
        name:
          - containerd.io

    - name: Create containerd configuration directory
      file:
        path: /etc/containerd
        state: directory

    - name: Copy containerd config file
      template:
        src: containerd-config.toml
        dest: /etc/containerd/config.toml

    - name: Disable swap for current session
      command: swapoff -a
      become: true

    - name: Disable swap permanently, persist reboots
      lineinfile:
        path: /etc/fstab
        regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
        line: '#\1\2\3swap\4'
        backup: yes

    - name: Enable bridging in /etc/sysctl.conf
      lineinfile:
        path: /etc/sysctl.conf
        backup: yes
        regexp: "^#(.*net.ipv4.ip_forward=.*)$"
        line: "net.ipv4.ip_forward=1"

    - name: Create k8s modules config file
      file:
        path: /etc/modules-load.d/k8s.conf
        state: touch
        mode: 0644
      become: yes
      when: inventory_hostname is not undefined
      register: k8s_conf_file

    - name: Add br_netfilter module to k8s config file
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        create: yes
        line: br_netfilter
      become: yes

    # - name: Reboot the server
    #   reboot:

    - name: Update package lists
      apt:
        update_cache: yes

    - name: Install kubeadm, kubelet, and kubectl
      become: yes
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - kubeadm
        - kubelet
        - kubectl

    - name: Initialize Kubernetes master
      command: kubeadm init --control-plane-endpoint=172.31.21.183 --node-name cluster_name --pod-network-cidr=10.244.0.0/16
      register: kubeadm_output
      ignore_errors: yes

    - name: Create .kube directory
      file:
        path: $HOME/.kube
        state: directory

    - name: Set up kubectl for the current user
      become: yes
      command: cp /etc/kubernetes/admin.conf $HOME/.kube/config

    - name: Set ownership of kubeconfig file
      file:
        path: $HOME/.kube/config
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user_gid }}"
        mode: "0644"

    - name: Install Calico network plugin
      command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
      when: "'calico' in kubeadm_output.stdout"

- hosts: workers
  become: yes
  tasks:
    - name: Install ca-certificates and curl
      become: yes
      apt:
        name:
          - ca-certificates
          - curl
        state: present

    - name: Create directory /etc/apt/keyrings
      become: yes
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: 0755

    - name: Download Docker GPG key
      become: yes
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: 0644

    - name: Set read permissions for everyone on docker.asc
      become: yes
      file:
        path: /etc/apt/keyrings/docker.asc
        mode: 0644

    - name: Add Docker repository
      become: yes
      lineinfile:
        path: /etc/apt/sources.list.d/docker.list
        state: present
        create: yes
        line: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"

    - name: Update apt package cache
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - containerd.io

    - name: Create containerd configuration directory
      file:
        path: /etc/containerd
        state: directory

    - name: Copy containerd config file
      template:
        src: containerd-config.toml
        dest: /etc/containerd/config.toml

    - name: Disable swap for current session
      command: swapoff -a
      become: true

    - name: Disable swap permanently, persist reboots
      lineinfile:
        path: /etc/fstab
        regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
        line: '#\1\2\3swap\4'
        backup: yes

    - name: Enable bridging in /etc/sysctl.conf
      lineinfile:
        path: /etc/sysctl.conf
        backup: yes
        regexp: "^#(.*net.ipv4.ip_forward=.*)$"
        line: "net.ipv4.ip_forward=1"

    - name: Create k8s modules config file
      file:
        path: /etc/modules-load.d/k8s.conf
        state: touch
        mode: 0644
      become: yes
      register: k8s_conf_file

    - name: Add br_netfilter module to k8s config file
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        create: yes
        line: br_netfilter
      become: yes

    - name: Reboot the server
      reboot:

    - name: Download Kubernetes GPG key
      become: yes
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        state: present
        keyring: /usr/share/keyrings/kubernetes-archive-keyring.gpg

    - name: Add Kubernetes repository
      become: yes
      lineinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        state: present
        create: yes
        line: "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"

    - name: Update package lists
      apt:
        update_cache: yes

    - name: Install kubeadm, kubelet, and kubectl
      become: yes
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - kubeadm
        - kubelet
        - kubectl

    - name: Join worker nodes to the cluster
      command: "{{ hostvars['master']['kubeadm_output']['stdout_lines'][0] }}"
      when: "'kubeadm join' in hostvars['master']['kubeadm_output']['stdout']"
